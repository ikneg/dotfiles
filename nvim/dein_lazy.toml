[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " Define mappings
  nnoremap <silent> <space>r  :Denite file/rec<CR>
  nnoremap <silent> <space><space> :DeniteBufferDir file<CR>
  nnoremap <silent> <space>vr  :Denite -resume<CR>
  nnoremap <silent> <space>g  :Denite grep<CR>
  nnoremap <silent> <space>cg :DeniteCursorWord grep<CR>
  nnoremap <silent> <space>i  :Denite outline<CR>
  nnoremap <silent> <space>f  :Denite file_mru<CR>
  nnoremap <silent> <space>y  :Denite neoyank<CR>
  
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> u
    \ denite#do_map('move_up_path')
  endfunction
  
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction
  
  " Change file/rec command.
  call denite#custom#var('file/rec', 'command',
  \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  " Ag command on grep source
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
  
  " Change ignore_globs
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
  
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7
  
  " Change denite default options
  call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ })
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = ['neosnippet.vim']

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  " 保存時のみ実行する
  let g:ale_lint_on_text_changed = 0
  " 表示に関する設定
  let g:ale_sign_error = ''
  let g:ale_sign_warning = ''
  let g:airline#extensions#ale#open_lnum_symbol = '('
  let g:airline#extensions#ale#close_lnum_symbol = ')'
  let g:ale_echo_msg_format = '[%linter%]%code: %%s'
  highlight link ALEErrorSign Tag
  highlight link ALEWarningSign StorageClass
  " Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
  let g:ale_fixers = {
        \ 'ruby': ['rubocop'],
        \ }
'''

[[plugins]]
repo = 'ngmy/vim-rubocop'

[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'slim-template/vim-slim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  autocmd BufWritePost * GitGutter
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  let g:quickhl_manual_enable_at_startup=1
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'
