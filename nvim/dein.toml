[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_theme = 'wombat'
  set laststatus=2
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#show_buffers = 0
  let g:airline#extensions#wordcount#enabled = 0
  let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#default#section_truncate_width = {}
  let g:airline#extensions#whitespace#enabled = 1
  let g:airline_inactive_collapse = 0
  let g:airline#extensions#tagbar#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " Define mappings
  nnoremap <silent> <space>r  :Denite file/rec<CR>
  nnoremap <silent> <space><space> :DeniteBufferDir file<CR>
  nnoremap <silent> <space>vr  :Denite -resume<CR>
  nnoremap <silent> <space>g  :Denite grep<CR>
  nnoremap <silent> <space>cg :DeniteCursorWord grep<CR>
  nnoremap <silent> <space>i  :Denite outline<CR>
  nnoremap <silent> <space>f  :Denite file_mru<CR>
  nnoremap <silent> <space>y  :Denite neoyank<CR>
  
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> u
    \ denite#do_map('move_up_path')
  endfunction
  
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction
  
  " Change file/rec command.
  call denite#custom#var('file/rec', 'command',
  \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  " Ag command on grep source
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
  
  " Change ignore_globs
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
  
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7
  
  " Change denite default options
  call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ })
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  autocmd BufWritePost * GitGutter
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  let g:quickhl_manual_enable_at_startup=1
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'


[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  " Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <Space>i     <Plug>(neosnippet_expand_or_jump)
  smap <Space>i     <Plug>(neosnippet_expand_or_jump)
  xmap <Space>i     <Plug>(neosnippet_expand_target)
  
  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <expr><TAB>
   \ pumvisible() ? "\<C-n>" :
   \ neosnippet#expandable_or_jumpable() ?
   \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  
  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
